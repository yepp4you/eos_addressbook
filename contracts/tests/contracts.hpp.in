#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio { namespace testing {

struct contracts {
   static std::vector<uint8_t> addressbook_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/addressbook/addressbook.wasm"); }
   static std::string          addressbook_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/addressbook/addressbook.wast"); }
   static std::vector<char>    addressbook_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/addressbook/addressbook.abi"); }

   struct util {
      static std::vector<uint8_t> test_api_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/test_api.wasm"); }
      static std::vector<uint8_t> exchange_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/exchange.wasm"); }
   };
};
}} //ns eosio::testing
